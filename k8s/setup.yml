---
- hosts: all
  become: yes
  become_user: root
  tasks:
    # Most of the initial tasks follow the instructions here: https://docs.docker.com/engine/install/ubuntu/
    # for install Docker Engine on Ubuntu.

    # Packages needs to use HTTPS apt repos
    - name: Prepare to add Docker apt repo
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Add Docker repo key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        state: present

    # If you're using apt on Ubuntu, change focal for your machine's actual codename
    # If you're not using apt at all, you'll have to change the next steps to install
    # Docker using a different method.
    - name: Add Docker apt repo
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install deployment dependencies (apt)
      apt:
        update_cache: yes
        allow_unauthenticated: yes
        name:
          - python3-pip
          - xz-utils
          - git
          - docker-ce 
          - docker-ce-cli 
          - containerd.io
          - snapd
          - ufw
          # Allows Ansible to become an unprivileged user
          # https://github.com/georchestra/ansible/issues/55#issuecomment-588313638
          - acl
    
    - name: Chmod for docker.sock
      command: sudo chmod 666 /var/run/docker.sock

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl
      register: installed

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Check is ufw installed
      shell: command -v ufw >/dev/null 2>&1
      register: is_ufw_exist
      ignore_errors: yes

    - name: Disabling ufw
      command: ufw disable
      become: yes
      when: is_ufw_exist.rc == 0

    - name: Set ip forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        sysctl_set: yes

    - name: Disable Swap
      command: swapoff -a

    - name: Install microk8s
      become: yes
      snap:
        name: microk8s
        classic: yes
        channel: "1.13/stable"

    - name: Microk8s status
      shell: source /etc/profile.d/apps-bin-path.sh && microk8s.status --wait-ready
      args:
        executable: /bin/bash

    - name: Allow Privileged for Kubelet (needed by Elasticsearch Helm chart)
      lineinfile:
        dest: /var/snap/microk8s/current/args/kubelet
        line: "--allow-privileged=true"
        state: present

    - name: Allow Privileged for K8s Apiserver (needed by Elasticsearch Helm chart)
      lineinfile:
        dest: /var/snap/microk8s/current/args/kube-apiserver
        line: "--allow-privileged=true"
        state: present

    - name: Set File Descriptor Limits for Microk8s
      lineinfile:
        dest: /var/snap/microk8s/current/args/containerd-env
        line: "ulimit -n 65536"
        state: present

    - name: Stop Microk8s
      shell: source /etc/profile.d/apps-bin-path.sh && microk8s.stop
      args:
        executable: /bin/bash

    - name: Start Microk8s
      shell: source /etc/profile.d/apps-bin-path.sh && microk8s.start
      args:
        executable: /bin/bash

    - name: Enable dns
      shell: "source /etc/profile.d/apps-bin-path.sh && microk8s.enable dns"
      args:
        executable: /bin/bash

    - name: Enable ingress
      shell: "source /etc/profile.d/apps-bin-path.sh && microk8s.enable ingress"
      args:
        executable: /bin/bash

    - name: Enable storage
      shell: "source /etc/profile.d/apps-bin-path.sh && microk8s.enable storage"
      args:
        executable: /bin/bash

    # - name: Initialize the Kubernetes cluster using kubeadm
    #   command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name master --pod-network-cidr=192.168.0.0/16
    #   when: installed is changed

    - name: Create unprivileged user for deploying and running services
      user:
        name: deploy
        shell: /bin/bash
        groups:
          # Allow deploy to run Docker and Docker Compose
          - docker

    - name: Create SSH directory for the deploy user
      file:
        path: /home/deploy/.ssh
        state: directory
        mode: '0700'
        owner: deploy



    # For each service, generate an SSH key pair used for cloning git repos
    # and deploying over SSH
    - name: Create deploy key for each app
      command: "ssh-keygen -o -a 100 -t ed25519 -f /home/deploy/.ssh/{{ item }}.id_ed25519_k8s -N ''"
      become: yes
      become_user: deploy
      args:
        creates: "/home/deploy/.ssh/{{ item }}.id_ed25519_k8s"
      loop: "{{ apps }}"

   

    # Configure deploy's SSH to use the deploy keys generated earlier when cloning/pulling git repos.
    # When cloning/pulling/etc the <app> repo, we'll use <app>.github.com, so that way, we can
    # use the app-specific deploy keys transparently using deploy's SSH config. Just have to clone
    # from <app>.github.com instead of github.com. See ./deploy-ssh-config.j2 template.
    - name: Set up github permissions
      template:
        src: ./deploy-ssh-config.j2
        dest: /home/deploy/.ssh/config
        owner: deploy

    - name: Copy the public deploy key to operator's machine
      fetch:
        src: "/home/deploy/.ssh/{{ item }}.id_ed25519_k8s.pub"
        dest: "keys"
      loop: "{{ apps }}"

    - name: Copy private SSH keys for Github deploy Action to operator's machine
      fetch:
        src: "/home/deploy/.ssh/{{ item }}.id_ed25519_k8s"
        dest: "keys"
      loop: "{{ apps }}"

    - name: Add Github servers to deploy's known hosts so that we skip prompts
      copy:
        src: ./known_hosts
        dest: /home/deploy/.ssh/known_hosts
        owner: deploy

    # - name: Copy admin.conf file
    #   copy: remote_src=True src=/etc/kubernetes/admin.conf dest=/home/deploy/.kube/config

    # - name: Change admin.conf owner
    #   file:
    #     path: /home/deploy/.kube/config
    #     owner: deploy
    #     group: deploy

    # - name: "Login to DockerHub"
    #   become: yes
    #   become_user: deploy
    #   command: "docker login -u {{ docker_username }} --password-stdin"
    #   args:
    #     stdin: "{{ docker_password }}"